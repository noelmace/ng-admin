#!/usr/bin/env node
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// from https://raw.githubusercontent.com/angular/devkit/15b3914a86516b5116461e78a1944088a761606a/bin/devkit-admin
'use strict';

/**
 * This file is useful for not having to load bootstrap-local in various javascript.
 * Simply use package.json to have npm scripts that use this script as well, or use
 * this script directly.
 */
require('../lib/bootstrap-local');

const { bold, gray, red, yellow, white } = require('chalk');
const minimist = require('minimist');
const fs = require('fs');
const path = require('path');

const args = minimist(process.argv.slice(2), {
  boolean: ['verbose']
});
const scriptName = args._.shift();
const builtinScriptPath = path.join('../scripts', scriptName);
const customScriptPath = path.join(process.cwd(), 'scripts', scriptName);

// process.chdir(path.join(__dirname, '..'));

// This might get awkward, so we fallback to console if there was an error.
let logger = null;
try {
  logger = new (require('@angular-devkit/core')).logging.IndentLogger('root');
  const filter = require('rxjs/operators').filter;

  logger.pipe(filter(entry => entry.level !== 'debug' || args.verbose)).subscribe(entry => {
    let color = gray;
    let output = process.stdout;
    switch (entry.level) {
      case 'info':
        color = white;
        break;
      case 'warn':
        color = yellow;
        break;
      case 'error':
        color = red;
        output = process.stderr;
        break;
      case 'fatal':
        color = x => bold(red(x));
        output = process.stderr;
        break;
    }

    output.write(color(entry.message) + '\n');
  });
} catch (e) {
  console.error(red(`Reverting to manual console logging.\nReason: ${e.message}.`));
  logger = {
    debug: console.log.bind(console),
    info: console.log.bind(console),
    warn: console.warn.bind(console),
    error: console.error.bind(console),
    fatal: x => {
      console.error(x);
      process.exit(100);
    },
    createChild: () => logger
  };
}

try {
  require(builtinScriptPath).default(args, logger);
} catch (e) {
  logger.info(`${scriptName} doesn't exist by default`);
  logger.info(`loading ${customScriptPath}`);
  logger.debug(e.stack);
  try {
    require(customScriptPath).default(args, logger);
  } catch (err) {
    logger.fatal(err.stack);
  }
}
